{"version":3,"sources":["Components/layout/Header.js","Components/TodoItem.js","Components/ToDos.js","Components/AddTodo.js","Components/pages/about.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","props","getStyle","backgroundColor","borderBottom","todo","completed","handleChange","event","setState","title","target","value","handleSubmit","e","preventDefault","update","state","id","this","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","onSubmit","name","Component","border","borderRadius","cursor","float","ToDos","todos","map","key","AddTodo","addTodo","console","log","display","flex","placeholder","className","about","Fragment","App","uuid","v4","filter","newTodo","data","forceUpdate","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cc8dfd3.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nfunction Header(){\n    return(\n        <header style={headerStyle}>\n            <h1>ToDoList</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n\n}\nconst headerStyle={\n    background:'#333',\n    color:'#fff',\n    textAlign:'center',\n    padding:'10px'\n}\nconst linkStyle={\n    color:\"#fff\",\n    textDecoration:'none'\n}\nexport default Header;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport class TodoItem extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n             id:this.props.todo.id,\n             title:this.props.todo.title\n        };\n    }\n\n    getStyle = () => {\n        return {\n            backgroundColor:'#f4f4f4',\n            padding:'10px',\n            borderBottom:'1px #ccc dotted',\n            textDecoration: this.props.todo.completed?'line-through':'none'\n        }\n    }\n\n    handleChange=(event)=>{\n        this.setState({\n            title:event.target.value\n        });\n    }\n\n    handleSubmit=(e)=>{\n        e.preventDefault();\n        this.props.update(this.state.title,this.state.id);\n    }\n \n    render() {\n        const{ id,title} = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                     <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{' '} { title }\n                     <button onClick={this.props.delTodo.bind(this,id)} style={btnStyle}>x</button>\n                     <form onSubmit={this.handleSubmit}>\n                       <input\n                        type=\"text\"\n                        name=\"title\"\n                        onChange={this.handleChange}\n                       />\n                       <input type=\"submit\" value=\"Submit\"/>  \n                     </form>\n                </p>   \n            </div>\n        )\n    }\n}\n//PropTypes\nTodoItem.propTypes={\n    todo:PropTypes.object.isRequired,\n    markComplete:PropTypes.func.isRequired,\n    delTodo:PropTypes.func.isRequired,\n    update:PropTypes.func.isRequired,\n\n}\n\nconst btnStyle={\n    background: '#ff0000',\n    color:'#fff',\n    border:'none' ,\n    padding:'5px 9px',\n    borderRadius:'50%',\n    cursor:'pointer',\n    float:'right'\n}\n\nconst itemStyle = {\n    backgroundColor:'#f4f4f4'\n}\n\nexport default TodoItem\n","import React , { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\nclass ToDos extends Component{\n    update = (title,id)=>{\n\n        this.props.update(title,id);\n \n    }\n    \n    render(){\n       return this.props.todos.map((todo) =>(\n           <div>\n               <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} update={this.update}/>\n           </div>\n       )); \n    }\n}\n//PropTypes\nToDos.propTypes={\n    todos:PropTypes.array.isRequired,\n    markComplete:PropTypes.func.isRequired,\n    delTodo:PropTypes.func.isRequired,\n    update:PropTypes.func.isRequired,\n}\n\nexport default ToDos;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nexport class AddTodo extends Component {\n    state = {\n        title:''\n    }\n    onSubmit= (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n        console.log(this);\n    }\n    \n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display:'flex'}}>\n                <input \n                type=\"text\" \n                name=\"title\"\n                style={{flex:'10',padding:'5px'}}\n                placeholder=\"Add Todo ...\"\n                value={this.state.title}\n                onChange={this.onChange}\n                />\n                <input\n                type=\"submit\"\n                value=\"Submit\"\n                className=\"btn\"\n                style={{flex:'1'}}\n                />\n            </form>\n        )\n    }\n}\n// PropTypes\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n     markComplete:PropTypes.func.isRequired,\n     delTodo:PropTypes.func.isRequired,\n  }\nexport default AddTodo;\n","import React from 'react'\n\nfunction about() {\n    return (\n        <React.Fragment>\n           <h2> About </h2>\n           <p> This is the TodoList app v1.0.0. <br/>Owned By : h@no!</p>\n        </React.Fragment>\n    )\n}\nexport default about;","import React , { Component } from 'react';\nimport {BrowserRouter as Router,Route } from 'react-router-dom';\nimport Header from './Components/layout/Header';\nimport ToDos from './Components/ToDos';\nimport AddTodo from './Components/AddTodo';\nimport about from './Components/pages/about';\nimport uuid from 'uuid';\nimport './App.css';\nclass App extends Component{\n  state={\n    todos:[\n      {\n        id:uuid.v4(),\n        title:'Reading Books',\n        completed:false\n      },\n\n      {\n        id:uuid.v4(),\n        title:'Lunch',\n        completed:false\n      },\n\n      {\n        id:uuid.v4(),\n        title:'Dinner',\n        completed:false\n      },\n    ]\n  };\n\n  //Toggle complete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id===id){\n            todo.completed=!todo.completed\n          } \n          return todo;\n        })\n      })\n  }\n  \n  //Delete Todo\n  delTodo = (id)=>{\n    this.setState({todos: [...this.state.todos.filter(todo => todo.id!==id)]});\n  }\n  \n  //Add Todo\n  addTodo=(title)=>{\n    const newTodo={\n      id:uuid.v4(),\n      title:title,\n      completed:false\n    }\n    this.setState({ todos: [...this.state.todos,newTodo]});\n  };\n  update = (title,id) => {\n    this.state.todos.map(data => {\n      if(data.id === id){\n        data.title=title\n        this.forceUpdate()\n      }\n    })\n  }\n\n\n  render() {\n                  return (\n                    <Router>\n                        <div className=\"App\">\n                          <div className=\"container\">\n                            <Header/>\n                              <Route exact path=\"/\" render={props=>(\n                                <React.Fragment>\n                                    <AddTodo addTodo={this.addTodo}/>\n                                    <ToDos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} update={this.update}/>\n                                </React.Fragment>\n                            )}/>\n                              <Route path=\"/about\" component={about}/>\n                            </div> \n                        </div>\n                      </Router>\n                );\n            }\n      }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}